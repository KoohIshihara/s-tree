atom-delete-node
  div(onclick='{deleteNode.bind(this, opts.id)}').wrap-atom.f.fh
    //img(src='./img/icon/delete.svg')
    p Delete

  style(scoped, type='less').
    :scope {
      .wrap-atom {
        p {
          font-size: 12px;
          font-weight: 500;
          color: #FF5252;
          border-bottom: solid #FF5252 0.5px;
        }
      }
    }


  script.

    var self = this;
    this.id = opts.id;
    this.deleteNode = function(id, e) {

      mixpanel.track('node was deleted');
      
      if(e){
        e.preventDefault();
        e.stopPropagation();
      }
      
      // singleとgroupそれぞれに対して、nextを持つ全てのnodeのデータを消去して、GUIから要素を消去
      //scenarioDisconnectNormalNode(scenarioArray, id);
      var preIndexesOfNomalNodes = scenarioGetNormalNodeIndexesThatConnectTo(scenarioArray, id);
      for(var i=0; i<preIndexesOfNomalNodes.length; i++){
        var index = preIndexesOfNomalNodes[i];

        var lineName = `line-${scenarioArray[index.scenarioIndex].id}`;
        var line = document.getElementById(lineName);
        if(line) line.parentNode.removeChild(line);

        scenarioDisconnectNormalNodeByIndex(scenarioArray, index.scenarioIndex);
        //delete scenarioArray[index.scenarioIndex].next;
        //delete scenarioArray[index.scenarioIndex].topLineId;
        //delete scenarioArray[index.scenarioIndex].gui.topLineId;
      }
      
      // deleteをentitiesで書き換えてるところ
      // scenarioDisconnectSelectionsNode(scenarioArray, id);
      var preIndexesOfSelectionNodes = scenarioGetSelectionIndexesThatConnectTo(scenarioArray, id);
      for(var i=0; i<preIndexesOfSelectionNodes.length; i++){
        var index = preIndexesOfSelectionNodes[i];

        var lineName = `line-${scenarioArray[index.scenarioIndex].selections[index.selectionIndex].id}`;
        var line = document.getElementById(lineName);
        if(line) line.parentNode.removeChild(line);

        scenarioDisconnectSelectionsNodeByIndex(scenarioArray, index.scenarioIndex, index.selectionIndex);
        //delete scenarioArray[index.scenarioIndex].selections[index.selectionIndex].next;
        //delete scenarioArray[index.scenarioIndex].selections[index.selectionIndex].topLineId;
      }


      // 自身のイベントデータと要素を消去
      var selfNode = scenarioGetEventById(scenarioArray, id);
      
      if(selfNode.nodeType=='single'){

        var lineName = `line-${selfNode.id}`;
        var line = document.getElementById(lineName);
        if(line) line.parentNode.removeChild(line);

      }else if(selfNode.nodeType=='group'){

        var selections = selfNode.selections;
        for(var i=0; i<selections.length; i++){
          var lineName = `line-${selections[i].id}`;
          var line = document.getElementById(lineName);
          if(line) line.parentNode.removeChild(line);
        }

      }

      var node = document.getElementById(id);
      node.parentNode.removeChild(node);

      scenarioDeleteNode(scenarioArray, id);

      // gotoのイベントのtoIdに指定されていた場合はリンクしているgotoも削除
      var gotoEvents = scenarioGetGoToEventsThatJumpTo(scenarioArray, id);;
      for(var i=0; i<gotoEvents.length; i++){
        this.deleteNode(gotoEvents[i].id);
      }

      // goto用のプレヴューも隠す
      var lineForGoToPreview = document.getElementById('lineForGoToPreview');
      if(lineForGoToPreview) lineForGoToPreview.classList.remove('show');


      // uponNodeでセーブされてしまうのでここではいったん関数を呼ばない
      // saveScenarioAsSubcollection();

    } // deleteNode



