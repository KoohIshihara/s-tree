item-pop-after-drag
  //div.wrap-item.pop-list
    p(onclick='{addSimple}').px12.pt8.pb7 Message
    p(onclick='{showQuestionSelection}').px12.pt8.pb7 Question
    p(onclick='{showGoToSelection}').px12.pt8.pb7 Go To
  div.wrap-item.pop-list
    p(onclick='{addSimple}').px12.pt8.pb7 Message
    p(onclick='{showQuestionSelection}').px12.pt8.pb7 Question
    p(onclick='{goToInCurrentProject}').px12.pt8.pb7 Go To
  div.wrap-item.pop-question-list
    p(onclick='{addSelection}').px12.pt8.pb7 Selection
    p(onclick='{addOpenQuestion}').px12.pt8.pb7 Open Question
  div.wrap-item.pop-goto-list
    p(onclick='{goToInCurrentProject}').px12.pt8.pb7 In This Project
    p(onclick='{goToAnotherProject}').px12.pt8.pb7 Another Project

  style(scoped, type='less').
    :scope {
      display: none;
      position: absolute;
      left: 100px;
      top: 100px;
      background: #fff;
      border-radius: 3px;
      border: solid .6px rgba(0,0,0,0.2);
      overflow: hidden;
      filter: drop-shadow(2px 2px 2px rgba(0,0,0,0.5));
      &.show-pop {
        display: block !important;
      }
      .wrap-item {
        p {
          min-width: 140px;
          cursor: pointer;
          color: #2196F3;
          text-align: center;
          font-size: 14px;
          font-weight: 300;
          letter-spacing: 0.6px;
          white-space: nowrap;
          border-bottom: solid .6px rgba(0,0,0,0.2);
        }
        p:last-child{
          border-bottom: none;
        }
      }
      .pop-question-list {
        display: none;
      }
      .pop-goto-list {
        display: none;
      }
    }

  script.

    var self = this;

    this.initSelection = [
      {label: 'Simple Message', func: this.addSimple},
      {label: 'Ask a Question', func: this.addQuestion},
      {label: 'Go To', func: this.goTo},
    ];

    this.addSimple = function(){

      mixpanel.track('simple message node was added');
      
      // もし始点にすでにlineがあったらguiから削除する
      // if(targetEvent.gui.topLineId) targetEvent.gui.topLineId;

      // contentを作成
      var content = {
        author: session.user.uid,
        id: `simpleTmp${riot.currentProject.nodeNum}`,
        num: riot.currentProject.nodeNum,//scenarioArray.length,
        type: 'normal',
        nodeType: 'single',
        text: 'Message',
        gui: {
          position: {},
        },
      };
      riot.currentProject.nodeNum++;

      addNode(arrowTo.x, arrowTo.y, content, 'item-message-node');

      // scenarioをupdateする
      saveScenarioAsSubcollection(content);

      focusNode(content);

      // ポップを消去
      var pop = document.querySelector('wrap-pop-after-drag');
      pop.classList.remove('show-pop');

    }

    this.addSelection = function(){

      mixpanel.track('selection node was added');
      
      var content = {
        author: session.user.uid,
        id: `selectionTmp${riot.currentProject.nodeNum}`,
        num: riot.currentProject.nodeNum,
        type: 'selection',
        nodeType: 'group',
        text: 'What is your choice?',//+idRand,
        addedSelectionsCounter : 0,
        selections: [
          {label: 'Selection', id: `selectionTmp${riot.currentProject.nodeNum}-selection0`},
        ],
        gui: {
          position: {},
        },
      };
      riot.currentProject.nodeNum++;

      addNode(arrowTo.x, arrowTo.y, content, 'item-selection-node');

      // ポップを消去
      var pop = document.querySelector('wrap-pop-after-drag');
      pop.classList.remove('show-pop');

      saveScenarioAsSubcollection(content);
      focusNode(content);

    }


    this.addOpenQuestion = function(){

      mixpanel.track('open question node was added');
      
      var content = {
        author: session.user.uid,
        id: `openquestionTmp${riot.currentProject.nodeNum}`,
        num: riot.currentProject.nodeNum,
        type: 'openquestion',
        nodeType: 'single',
        text: 'What is question?',//+idRand,
        expectedAnswer: 'type your answer...',
        gui: {
          position: {},
        },
      };
      riot.currentProject.nodeNum++;

      addNode(arrowTo.x, arrowTo.y, content, 'item-open-question-node');

      // ポップを消去
      var pop = document.querySelector('wrap-pop-after-drag');
      pop.classList.remove('show-pop');

      saveScenarioAsSubcollection(content);
      focusNode(content);

    }


    this.goToInCurrentProject = function(){

      // overlayを出してNodeを選択させる
      $('#canvasOverlay').fadeIn(400);
      var canvasNodes = document.getElementById('canvasNodes');
      canvasNodes.classList.add('add-node-z');


      var fromEvent = targetEvent;
      goToFrom = fromEvent;

      if(fromEvent.nodeType == 'single') goToFromId = targetEvent.id;
      if(fromEvent.nodeType == 'group') goToFromId = targetSelectionEventId;

      // goToNodeを追加
      underChoiceOfGoTo = true;

    }


    this.goToAnotherProject = function(){
      // シナリオリストを出す
      $('util-modal').fadeIn(400);
      riot.mount('modal-window-content', 'module-modal-select-project');
      riot.update();
    }


    this.showQuestionSelection = function(){
      var pop = document.querySelector('wrap-pop-after-drag');
      var preHeight = pop.offsetHeight;

      $('.pop-list').hide();
      $('.pop-question-list').show();

      var nowHeight = pop.offsetHeight;


      var gap = (preHeight-nowHeight)/2;
      
      var y = parseInt(pop.style.top) + gap;

      pop.style.top = `${y}px`;
    }


    this.showGoToSelection = function(){
      var pop = document.querySelector('wrap-pop-after-drag');
      var preHeight = pop.offsetHeight;

      $('.pop-list').hide();
      $('.pop-goto-list').show();

      var nowHeight = pop.offsetHeight;


      var gap = (preHeight-nowHeight)/2;
      
      var y = parseInt(pop.style.top) + gap;

      pop.style.top = `${y}px`;
    }

    




