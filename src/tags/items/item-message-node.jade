item-message-node(onclick='{click}' onmouseover='{over}' onmouseout='{out}' id='{id}' data-id='{id}').node
  div.wrap-node
    div.wrap-node-content.f.fm.flex-between.py4
      //p.text.line-clamp-1.pl12.pr8.pt8.pb7 
      textarea(onkeyup='{updateText.bind(e, this)}').textarea.px12 {text}
      p.text.hidden-text.px12 {text}
      //div(onmousedown='{down}').wrap-drag-button.pr8.f.fm
        div.drag-button
  div(onmousedown='{down}').wrap-drag-button.f.fm
    div.drag-button
  div.wrap-num
    p {num}
  div.wrap-icon.f.fh
    atom-delete-node(id='{id}')
    //atom-delete-node(id='{id}' if='{!(ifFirstNode)}')
  //div(if='{ifFirstNode}').start-node-overlay
    p.py12 Start Node



  style(scoped, type='less').
    :scope {
      position: relative;
      display: inline-block;
      transition: transform 0.2s;
      cursor: grab;

      .wrap-node {
        border: solid rgba(0,0,0,0.2) 0.5px;
        border-radius: 3px;
        overflow: hidden;
        position: relative;
        z-index: 2;
        transform: scale(1);
        .wrap-node-content {
          position: relative;
          overflow: visible;
          background: #fff;
          .text {
            /*white-space: nowrap;*/
            display: inline-block;
            color: #2a2a2a;
            letter-spacing: 0.6px;
            font-weight: 400;
            max-width: 180px;

            position: absolute;
            left: 0px;
            top: 4px;
            word-break: break-all;
            visibility: hidden;
            pointer-events: none;
          }
          .textarea {
            display: inline-block;
            color: #2a2a2a;
            letter-spacing: 0.6px;
            font-weight: 400;
            width: 100%;
            min-width: 14px;
            max-width: 180px;
            min-height: 19px;

            outline: none;
            resize: none;
            height: 34px;
          }
        } /* .wrap-node-content */

      } /*wrap-node*/


      .wrap-drag-button {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: calc(~'100% + 6px');
        z-index: 10;
        height: 100%;
        cursor: pointer;
        .drag-button {
          background: #2196F3;
          width: 8px;
          height: 8px;
          border-radius: 50%;
        }
      }

      .start-node-overlay {
        position: absolute;
        z-index: 1;
        border: dotted rgba(33,150,243,0.4) 2.4px;
        border-radius: 3px;
        width: calc(~'100% + 48px');
        height: calc(~'100% + 96px');
        top: -64px;
        left: -24px;
        p {
          text-align: center;
          color: #2196F3;
        }
      }

      &.drag {
        cursor: grabbing !important;
      }
      &.active-over {
        transform: scale(1.05) !important;
      }

      &.focused-node {
        .wrap-node {
          border: solid #2196F3 0.8px !important;
          box-shadow: 1px 1px 4px rgba(0,0,0,0.4);
        }
      }

      .wrap-num {
        position: absolute;
        left: 2px;
        top: -18px;
        p {
          font-size: 12px;
          font-weight: 300;
          text-align: center;
          color: #999;
        }
      }

      .wrap-icon {
        position: absolute;
        right: 0px;
        top: -20px;
        cursor: pointer;
        display: none;
        z-index: 2;
      }
      &.focused-node {
        .wrap-icon {
          display: block;
        }
      }

      &.is-go-to-node {
        .wrap-node {
          border: none;
          .wrap-node-content {
            background: #FF5722;
            p {
              color: #fff;
            }
            .wrap-drag-button {
              display: none;
            }
          }
        }
      }
    }

  script.

    var self = this;

    this.content = this.opts.content;

    this.id = this.opts.content.id;
    this.text = this.opts.content.text;
    this.next = this.opts.content.next;
    this.num = this.opts.content.num;

    this.down = mdownOnLineStart;

    this.click = clickOnNode;
    this.over = moverTemplate;
    this.out = moutTemplate;


    this.on('mount', function(){

      // はじめのノードのtextareaの大きさをテキストの量によって調整
      var node = document.getElementById(self.id);
      var nodeText = node.getElementsByClassName('text')[0];
      if(self.text=='') self.text = 'Start Message';
      nodeText.innerText = self.text;

      // ノードのテキストを更新
      var hiddenText = self.root.getElementsByClassName('hidden-text')[0];
      var textarea = self.root.getElementsByClassName('textarea')[0];

      hiddenText.innerHTML = self.text;//textarea.value;

      var w = hiddenText.offsetWidth;
      var h = hiddenText.offsetHeight;
      
      textarea.style.width = `${w+10}px`;
      textarea.style.height = `${h}px`;

    });

    /*
    // 始点ノードだった場合
    this.ifFirstNode = false;
    if(this.id.indexOf('first')==0) this.ifFirstNode = true;
    */

    this.updateText = function(self, e){

      // エンターが押された時
      if(e.keyCode==13){
        var textarea = self.root.getElementsByClassName('textarea')[0];
        var text = textarea.value;
        text = text.replace(/\r?\n/g, '');
        textarea.value = text;

        //if(self.content.gui.topLine==undefined) addNewSimpleMessageViaCommand();
        //addNewSimpleMessageViaCommand();
      }


      // nodeのテキストを変更
      var node = self.root;

      var preWidth = node.offsetWidth;
      var preHeight = node.offsetHeight;


      // hidden-textとtextareaを同期させて、動的にサイズが変化するtextareaを再現
      var hiddenText = node.getElementsByClassName('hidden-text')[0];


      hiddenText.innerHTML = e.target.value;

      var w = hiddenText.offsetWidth;
      var h = hiddenText.offsetHeight;

      e.target.style.width = `${w+4}px`;
      e.target.style.height = `${h}px`;


      // 変更してずれる座標分の修正
      var gapX = node.offsetWidth - preWidth;
      var gapY = node.offsetHeight - preHeight;

      // nodeの座標をtopLineが中心になるように修正
      var content = getEventFromScenarioById(self.id);
      var preNodePosY = content.gui.position.y;

      var y = preNodePosY - gapY/2;
      content.gui.position.y = y;
      node.style.top = `${y}px`;

      // topLineの修正
      var topLine = document.getElementById(`line-${content.id}`);
      if(topLine){
        var preX = parseInt(topLine.getAttribute('x1'));
        //var preY = parseInt(topLine.getAttribute('y1'));
        var x = preX + gapX;
        //var y = preY + gapY/2;
        topLine.setAttribute('x1', x);
        //topLine.setAttribute('y1', y);
        content.gui.topLinePosition.origin.x = x;
      }

      // 変更をscenarioArrayに反映して保存
      for(var i=0; i<scenarioArray.length; i++){
        if(scenarioArray[i].id==content.id){
          scenarioArray[i] = content;
        }
      }

      // textをシナリオデータに反映
      content.text = e.target.value;

      // 入力中はセーブさせない
      clearTimeout(self.saveTimer);
      self.saveTimer = setTimeout(function(){
        saveScenarioAsSubcollection(self.content);
      }, 800);



    }


